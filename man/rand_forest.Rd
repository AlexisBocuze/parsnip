% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rand_forest.R
\name{rand_forest}
\alias{rand_forest}
\alias{update.rand_forest}
\title{General Interface for Random Forest Models}
\usage{
rand_forest(mode = "unknown", mtry = NULL, trees = NULL, min_n = NULL,
  others = list(), ...)

\method{update}{rand_forest}(object, mtry = NULL, trees = NULL,
  min_n = NULL, others = list(), fresh = FALSE, ...)
}
\arguments{
\item{mode}{A single character string for the type of model.
Possible values for this model are "unknown", "regression", or
"classification".}

\item{mtry}{An integer for the number of predictors that will
be randomly sampled at each split when creating the tree models.}

\item{trees}{An integer for the number of trees contained in
the ensemble.}

\item{min_n}{An integer for the minimum number of data points
in a node that are required for the node to be split further.}

\item{others}{A named list of arguments to be used by the
underlying models (e.g., \code{ranger::ranger},
\code{randomForest::randomForest}, etc.). .}

\item{...}{Used for method consistency. Any arguments passed to
the ellipses will result in an error. Use \code{others} instead.}

\item{object}{A random forest model specification.}

\item{fresh}{A logical for whether the arguments should be
modified in-place of or replaced wholesale.}
}
\value{
An updated model specification.
}
\description{
\code{rand_forest} is a way to generate a \emph{specification} of a model
before fitting and allows the model to be created using
different packages in R or via Spark. The main arguments for the
model are:
\itemize{
\item \code{mtry}: The number of predictors that will be
randomly sampled at each split when creating the tree models.
\item \code{trees}: The number of trees contained in the ensemble.
\item \code{min_n}: The minimum number of data points in a node
that are required for the node to be split further.
}
These arguments are converted to their specific names at the
time that the model is fit. Other options and argument can be
set using the \code{others} argument. If left to their defaults
here (\code{NULL}), the values are taken from the underlying model
functions.

If parameters need to be modified, this function can be used
in lieu of recreating the object from scratch.
}
\details{
The data given to the function are not saved and are only used
to determine the \emph{mode} of the model. For \code{rand_forest}, the
possible modes are "regression" and "classification".

The model can be created using the \code{fit()} function using the
following \emph{engines}:
\itemize{
\item \pkg{R}:  \code{"ranger"} or \code{"randomForests"}
\item \pkg{Spark}: \code{"spark"}
}

Main parameter arguments (and those in \code{others}) can avoid
evaluation until the underlying function is executed by wrapping the
argument in \code{\link[rlang:expr]{rlang::expr()}} (e.g. \code{mtry = expr(floor(sqrt(p)))}).
}
\examples{
rand_forest(mode = "classification", trees = 2000)
# Parameters can be represented by a placeholder:
rand_forest(mode = "regression", mtry = varying())
model <- rand_forest(mtry = 10, min_n = 3)
model
update(model, mtry = 1)
update(model, mtry = 1, fresh = TRUE)
}
\seealso{
\code{\link[=varying]{varying()}}, \code{\link[=fit]{fit()}}
}
