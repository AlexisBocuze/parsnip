% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/linear_reg_doc_stan.R
\name{details_linear_reg_stan}
\alias{details_linear_reg_stan}
\title{Linear regression via Bayesian Methods}
\description{
The \code{stan} engine estimates regression parameters using Bayesian estimation.
}
\details{
For this engine, there is a single mode: regression
\subsection{Tuning Parameters}{

This model has no tuning parameters.
}

\subsection{Important engine-specific options}{

Some relevant arguments that can be passed to \code{set_engine()}:
\itemize{
\item \code{chains}: A positive integer specifying the number of Markov chains.
The default is 4.
\item \code{iter}: A positive integer specifying the number of iterations for
each chain (including warmup). The default is 2000.
\item \code{seed}: The seed for random number generation.
\item \code{cores}: Number of cores to use when executing the chains in
parallel.
\item \code{prior}: The prior distribution for the (non-hierarchical)
regression coefficients. The \code{stan} engine does not fit any
hierarchical terms. See the \code{stan_glmer} engine from the
\code{multilevelmod} package for that type of model.
\item \code{prior_intercept}: The prior distribution for the intercept (after
centering all predictors).
}
}

\subsection{Translation from parsnip to the original package}{\if{html}{\out{<div class="r">}}\preformatted{linear_reg() \%>\% 
  set_engine("stan") \%>\% 
  set_mode("regression") \%>\% 
  translate()
}\if{html}{\out{</div>}}\preformatted{## Linear Regression Model Specification (regression)
## 
## Computational engine: stan 
## 
## Model fit template:
## rstanarm::stan_glm(formula = missing_arg(), data = missing_arg(), 
##     weights = missing_arg(), family = stats::gaussian, refresh = 0)
}
}

\subsection{Preprocessing requirements}{

The only preprocessing required for this model is that
factor/categorical predictors need to be converted to numeric values
(e.g., dummy or indicator variables). When using the formula method via
\code{\link[=fit.model_spec]{fit.model_spec()}}, \code{parsnip} will convert these
data if required.
}

\subsection{Other details}{

The model can accept case weights.

For prediction, the \code{stan} engine can compute posterior intervals
analogous to confidence and prediction intervals. In these instances,
the units are the original outcome and when \code{std_error = TRUE}, the
standard deviation of the posterior distribution (or posterior
predictive distribution as appropriate) is returned.
}

\subsection{References}{
\itemize{
\item McElreath, R. 2020 \emph{Statistical Rethinking}. CRC Press.
}
}
}
\keyword{internal}
