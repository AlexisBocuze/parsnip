% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict.R, R/predict_class.R,
%   R/predict_classprob.R, R/predict_interval.R, R/predict_num.R
\name{predict.model_fit}
\alias{predict.model_fit}
\alias{predict_class.model_fit}
\alias{predict_class}
\alias{predict_classprob.model_fit}
\alias{predict_classprob}
\alias{predict_confint.model_fit}
\alias{predict_confint}
\alias{predict_predint.model_fit}
\alias{predict_predint}
\alias{predict_num.model_fit}
\alias{predict_num}
\title{Model predictions}
\usage{
\method{predict}{model_fit}(object, newdata, type = NULL, ...)

\method{predict_class}{model_fit}(object, newdata, ...)

predict_class(object, ...)

\method{predict_classprob}{model_fit}(object, newdata, ...)

predict_classprob(object, ...)

\method{predict_confint}{model_fit}(object, newdata, level = 0.95, ...)

predict_confint(object, ...)

\method{predict_predint}{model_fit}(object, newdata, level = 0.95, ...)

predict_predint(object, ...)

\method{predict_num}{model_fit}(object, newdata, ...)

predict_num(object, ...)
}
\arguments{
\item{object}{An object of class \code{model_fit}}

\item{newdata}{A rectangular data object, such as a data frame.}

\item{type}{A single character value or \code{NULL}. Possible values
are "numeric", "class", "probs", "link", "conf_int", "pred_int",
or "raw" (the last two are not yet implemented). When \code{NULL},
\code{predict} will choose an appropriate value based on the model's
mode.}

\item{...}{Arguments to pass to other methods (not currently used).}

\item{level}{A single numeric value between zero and one for the
interval estimates.}
}
\value{
See Details.
}
\description{
Apply a model to create different types of predictions.
\code{predict} can be used for all types of models and used the
"type" argument for more specificity. Other functions can be
used for each type of prediction (see Details).
}
\details{
If "type" is not supplied to \code{predict}, then a choice
is made (\code{type = "numeric"} for regression models and
\code{type = "class"} for classification).

\code{predict} is designed to provide a tidy results. There will be
a tibble as many rows in the output as there are rows in
\code{newdata} and the column names will be predictable. For numeric
results with a single outcome, the tibble will have a \code{.pred}
column and \code{.pred_Yname} for multivariate results. For
hard class predictions, the column is named \code{.pred_class}
and, when \code{type = "prob"}, the columns are
\code{.pred_classlevel}. \code{type = "conf_int"} and ``type = "pred_int"\code{return tibles with columns}.pred_lower` and `.pred_upper` with
an attribute for the confidence level.

The more specific prediction functions (e.g. \code{predict_num}) can
return non-tibble results. \code{predict_num} generates a vector (for
univariate models) or a data frame (multivariate).
\code{predict_class} returns a factor and \code{predict_classprob} returns
a data frame with columns for the factor levels.
}
\examples{
library(dplyr)

lm_model <- 
  linear_reg() \%>\%
  fit(mpg ~ ., data = mtcars \%>\% slice(11:32), engine = "lm")

predict(lm_model, mtcars \%>\% slice(1:10) \%>\% select(-mpg))
predict_num(lm_model, mtcars \%>\% slice(1:10) \%>\% select(-mpg))
predict(lm_model, mtcars \%>\% slice(1:10) \%>\% select(-mpg), type = "conf_int")
}
